# This workflow builds a Docker image, pushes it to Docker Hub,
# and then triggers a new deployment on Render.

name: Build, Push, and Deploy Backend

# Controls when the workflow will run
on:
  # Triggers the workflow on push events to the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_push_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks out your repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Logs in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Sets up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3.5 Ensure model artifact is present in backend/artifacts (download if provided)
      - name: Ensure model artifact available
        shell: bash
        run: |
          set -e
          mkdir -p backend/artifacts
          # If an artifact already exists, keep it
          if ls backend/artifacts/pipeline_with_scaler_*.joblib 1> /dev/null 2>&1; then
            echo "Found existing pipeline artifact in backend/artifacts"
          else
            if [ -n "${{ secrets.MODEL_ARTIFACT_URL }}" ]; then
              echo "No local artifact found â€” downloading from MODEL_ARTIFACT_URL"
              curl -fsSL "${{ secrets.MODEL_ARTIFACT_URL }}" -o backend/artifacts/pipeline_with_scaler.joblib
              echo "Downloaded artifact to backend/artifacts/pipeline_with_scaler.joblib"
            else
              echo "Warning: No pipeline artifact found in repo and MODEL_ARTIFACT_URL secret is not set. The built image may not include the model."
            fi
          fi

      # 4. Builds and pushes the Docker image from the 'backend' folder
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            sammydevv/unemployment-backend:latest
            sammydevv/unemployment-backend:${{ github.sha }}

      # 5. Triggers the deployment on Render using the deploy hook
      - name: Trigger Render Deploy
        shell: bash
        env:
          IMAGE_REPO: sammydevv/unemployment-backend
        run: |
          if [ -z "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" ]; then
            echo "RENDER_DEPLOY_HOOK_URL is not set; skipping deploy trigger"
            exit 0
          fi
          # Construct image tag using the full commit SHA and a short SHA
          full_sha=${GITHUB_SHA}
          short_sha=${GITHUB_SHA:0:7}
          image_tag="$IMAGE_REPO:$full_sha"
          echo "Triggering Render deploy hook for image: $image_tag"
          payload=$(jq -nc --arg image "$image_tag" --arg full "$full_sha" --arg short "$short_sha" '{image: $image, sha: $full, short: $short}')
          # POST JSON payload so Render (or a custom hook) can pick the desired image tag
          status=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$payload" "${{ secrets.RENDER_DEPLOY_HOOK_URL }}")
          echo "Render hook HTTP status: $status"
          if [[ "$status" -lt 200 || "$status" -ge 300 ]]; then
            echo "Render deploy hook returned non-2xx status: $status"
            exit 1
          fi